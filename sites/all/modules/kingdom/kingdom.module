<?php
// $Id: kingdom.module,v 1.1.2.5 2010/07/10 13:37:11 rfay Exp $

/**
 * @file
 * This is an example outlining how a module can be used to display a
 * custom page at a given URL.
 */

/**
 * Implementation of hook_help().
 *
 * Throughout Drupal, hook_help() is used to display help text at the top of
 * pages. Some other parts of Drupal pages get explanatory text from these hooks
 * as well. We use it here to illustrate how to add help text to the pages your
 * module defines.
 */
function kingdom_help($path, $arg) {
  switch ($path) {
    case 'example/foo':
      // Here is some help text for a custom page. This information will be
      // introduced in the page when viewing example/foo URL.
      return t('This sentence contains all the letters in the English alphabet.');
  }
}

/**
 * Implementation of hook_perm().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function kingdom_perm() {
  return array(
    'access kingdom',
    'rule kingdom',
    'add knight',
    'reset kingdom',
  );
}

/**
 * Implementation of hook_menu().
 *
 * hook_menu() must be implemented to emit items to place in the main menu.
 * This is a required step for modules wishing to display their own pages,
 * because the process of creating the links also tells Drupal what
 * callback function to use for a given URL. The menu items returned
 * here provide this information to the menu system.
 *
 * With the below menu definitions, URLs will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=example/foo, then the menu system
 * will first look for a menu item with that path. In this case it will
 * find a match, and execute kingdom_foo().
 *
 * If the user accesses http://example.com/?q=example, no match will be found,
 * and a 404 page will be displayed. They same will happen for the urls:
 *  - http://example.com/?q=example/baz
 *  - http://example.com/?q=example/baz/1
 *
 * If the user accesses http://example.com/?q=example/baz, the menu system
 * will not find a match, as the menu entries are registered with the form:
 * a/b/c/d. All the elements included in the menu entry definition should be
 * present for the menu system to match the request.
 *
 * If the user accesses http://example.com/?q=example/baz/1/2, the menu system
 * will first look for example/baz/1/2. Not finding a match, it will look for
 * example/baz/1/%. Again not finding a match, it will look for example/baz/%/2. Yet
 * again not finding a match, it will look for example/baz/%/%. This time it finds
 * a match, and so will execute kingdom_baz(1, 2). Note the parameters
 * being passed; this is a very useful technique.
 *
 * The @link menu_example.module Menu Example @endlink provides extensive
 * examples for hook_menu().
 */
function kingdom_menu() {
  // main page
  $items['kingdom'] = array(
    'title' => 'Kingdom',
    'page callback' => 'page_kingdom',
    'access arguments' => array('access kingdom'),
  );
  // proffesion's page
  $items['kingdom/professions'] = array(
    'title' => 'Kingdom\'s professions',
    'page callback' => 'page_kingdom_professions',
    'access arguments' => array('rule kingdom'),
  );
  // knigth's page
  $items['kingdom/knigths'] = array(
    'title' => 'Knigths manage page',
    'page callback' => 'page_kingdom_knight',
    'access arguments' => array('rule kingdom'),
  );

/*  $items['example/baz/%/%'] = array(
    'title' => 'Baz',
    'page callback' => 'kingdom_baz',
    'page arguments' => array(2, 3),
    'access arguments' => array('access baz content'),
    'type' => MENU_CALLBACK,
  );
*/
  return $items;
}

/**
 * A simple page callback.
 *
 * Page callbacks are required to return the entire page. The content
 * is then usually output via a call to theme('page'), where the theme system
 * will then surround the content in the appropriate blocks, navigation, and
 * styling.
 *
 * If you do not want to use the theme system (for example for outputting an
 * image or XML), you should print the content yourself and not return anything.
 */
function page_kingdom() {
	 var_dump(drupal_install_schema('kingdom'));
  return '<p>Добро пожаловать в королевство, тут всё будет. Не отчаивайтесь.</p>';
}

/*
function kingdom_baz($alice, $bob) {
  // Make sure you don't trust the URL to be safe! Always check for threats.
  if (!is_numeric($alice) || !is_numeric($bob)) {
    // We will just show a standard "access denied" page in this case.
    return drupal_access_denied();
  }

  $list[] = t("Alice's number was @number.", array('@number' => $alice));
  $list[] = t("Bob's number was @number.", array('@number' => $bob));
  $list[] = t('The total was @number.', array('@number' => $alice + $bob));

  return t("baz content") . theme('item_list', $list);
}
*/


