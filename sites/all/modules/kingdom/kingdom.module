<?php
// $Id: kingdom.module,v 1.1.2.5 2010/07/10 13:37:11 rfay Exp $

/**
 * @file
 * This is an example outlining how a module can be used to display a
 * custom page at a given URL.
 */

/**
 * Implementation of hook_help().
 *
 * Throughout Drupal, hook_help() is used to display help text at the top of
 * pages. Some other parts of Drupal pages get explanatory text from these hooks
 * as well. We use it here to illustrate how to add help text to the pages your
 * module defines.
 */
function kingdom_help($path, $arg) {
  switch ($path) {
    case 'example/foo':
      // Here is some help text for a custom page. This information will be
      // introduced in the page when viewing example/foo URL.
      return t('This sentence contains all the letters in the English alphabet.');
  }
}

/**
 * Implementation of hook_perm().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function kingdom_perm() {
  return array(
    'access kingdom',
    'rule kingdom',
    'add knight',
    'reset kingdom',
  );
}

/**
 * Implementation of hook_menu().
 *
 * hook_menu() must be implemented to emit items to place in the main menu.
 * This is a required step for modules wishing to display their own pages,
 * because the process of creating the links also tells Drupal what
 * callback function to use for a given URL. The menu items returned
 * here provide this information to the menu system.
 *
 * With the below menu definitions, URLs will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=example/foo, then the menu system
 * will first look for a menu item with that path. In this case it will
 * find a match, and execute kingdom_foo().
 *
 * If the user accesses http://example.com/?q=example, no match will be found,
 * and a 404 page will be displayed. They same will happen for the urls:
 *  - http://example.com/?q=example/baz
 *  - http://example.com/?q=example/baz/1
 *
 * If the user accesses http://example.com/?q=example/baz, the menu system
 * will not find a match, as the menu entries are registered with the form:
 * a/b/c/d. All the elements included in the menu entry definition should be
 * present for the menu system to match the request.
 *
 * If the user accesses http://example.com/?q=example/baz/1/2, the menu system
 * will first look for example/baz/1/2. Not finding a match, it will look for
 * example/baz/1/%. Again not finding a match, it will look for example/baz/%/2. Yet
 * again not finding a match, it will look for example/baz/%/%. This time it finds
 * a match, and so will execute kingdom_baz(1, 2). Note the parameters
 * being passed; this is a very useful technique.
 *
 * The @link menu_example.module Menu Example @endlink provides extensive
 * examples for hook_menu().
 */
function kingdom_menu() {
  // main page
  $items['kingdom'] = array(
    'title' => 'Kingdom',
    'page callback' => 'page_kingdom',
    'access arguments' => array('access kingdom'),
  );
  // proffesion's page
  $items['kingdom/professions'] = array(
    'title' => 'Kingdom\'s professions',
    'page callback' => 'page_kingdom_professions',
    'access arguments' => array('rule kingdom'),
  );
  // knight's page
  $items['kingdom/knigths'] = array(
    'title' => 'Knigths manage page',
    'page callback' => 'page_kingdom_knight',
    'access arguments' => array('rule kingdom'),
  );
  // stat page
  $items['kingdom/stat'] = array(
    'title' => 'Money stat page',
    'page callback' => 'page_kingdom_stat',
    'access arguments' => array('access kingdom'),
  );


/*  $items['example/baz/%/%'] = array(
    'title' => 'Baz',
    'page callback' => 'kingdom_baz',
    'page arguments' => array(2, 3),
    'access arguments' => array('access baz content'),
    'type' => MENU_CALLBACK,
  );
*/
  return $items;
}

/**
 * A simple page callback.
 *
 * Page callbacks are required to return the entire page. The content
 * is then usually output via a call to theme('page'), where the theme system
 * will then surround the content in the appropriate blocks, navigation, and
 * styling.
 *
 * If you do not want to use the theme system (for example for outputting an
 * image or XML), you should print the content yourself and not return anything.
 */
function page_kingdom() {
  $out = '<p>Добро пожаловать в королевство.</p>';
  // what day is today
  $today = what_day_is_today();
  $out .= t('<p>Дней с начала времён прошло: %day</p>', array("%day"=>$today-1));
  $out .= drupal_get_form('timetravel_form');
  $out .= "<h3>Нажми кнопку чтобы вернуться в начало</h3>";
  $out .= drupal_get_form('kingdomreset_form');
  return $out;
}

function what_day_is_today() {
  $result = db_query("SELECT MAX(day) as max FROM {farmers}");
  $result = db_fetch_array($result);
  return max(1,intval($result['max']));
}

function kingdomreset_form($form_state) {
  $form['submit'] = array('#type' => 'submit', '#value' => t('Назад в прошлое!'));
  return $form;
}

function kingdomreset_form_submit($form, &$form_state) {
  db_query("TRUNCATE TABLE {logs}");
  db_query("UPDATE {farmers} SET storehouse=0, day=1");
  drupal_set_message('Все товары и налоги забыты. Можно начинать сначала.');
}

function timetravel_form($form_state) {
  $form['days'] = array(
    '#type' => 'textfield',
    '#title' => t('дней'),
    '#size' => 10,
    '#maxlength' => 10,
    '#default_value' => 7,
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Вперёд в будущее!'));
  return $form;
}

function timetravel_form_validate($form, &$form_state) {
  $form_state['values']['days']=intval($form_state['values']['days']);
  $days=$form_state['values']['days'];
  if (! $days)
    form_set_error('days', t('Слишком мало'));
  if ($days > 1000)
    form_set_error('days', t('Слишком много'));
}

function timetravel_form_submit($form, &$form_state) {
  $days=$form_state['values']['days'];
  // farmers
  $farmers = array();
  $result = db_query("SELECT * FROM {farmers}");
  while ($row = db_fetch_array($result)) {
    $farmers[]=$row;
  }
  get_all_knights();
  get_all_professions();

  $last_day=what_day_is_today();
 
  for ($i=$last_day,$max_day=$last_day+$days; $i < $max_day; ++$i) {
    //jl_db($i);
    array_walk($farmers, 'iterate_farmers');
    $day_of_month=fmod($i,30);
    if ($day_of_month==0) { //end of month
      array_walk($farmers, 'grab_farmers', $i);
      //drupal_set_message($i);
    }
  }
  array_walk($farmers, 'save_farmers', $i);
}

function iterate_farmers(&$elem) {
  $elem['storehouse'] += rand(1,10);
}

function grab_farmers(&$elem, $i, $day) {
  global $knights, $professions;
  // собираем налоги, даём каждому по заслугам
  $knight_id=$elem['knight_id'];
  $profession_id = $elem['profession_id'];
  $knight_income = $elem['storehouse']*$professions[$profession_id]['price'];
  $incom_bishop = $knight_income*($knights[$knight_id]['tithe']/100);
  $incom_king = $knight_income - $incom_bishop - $knight_income*($knights[$knight_id]['fee']/100);
  db_query("INSERT INTO {logs} (day, knight_id, profession_id, incom_king, incom_bishop) VALUES (%d, %d, %d, %f, %f);",
           $day, $knight_id, $profession_id, $incom_king, $incom_bishop);
  $elem['storehouse'] = 0;
}

function save_farmers(&$elem, $i, $day) {
  $elem['day']=$day;
  db_query("UPDATE {farmers} SET storehouse=%d, day=%d WHERE id=%d", $elem['storehouse'], $elem['day'], $elem['id']);
  //jl_db($elem);
}

function page_kingdom_professions() {
  $result = db_query("SELECT price, title FROM {professions}");
  $rows=array();
  while ($record = db_fetch_object($result)) {
    $rows[]=array($record->title, $record->price);
  }
  $out .=   theme_table(array("Товар", "Цена"), $rows);
  $out .= "<h3>Добавьте новый товар</h3>".drupal_get_form('professions_form');
  return $out;
}

function professions_form_submit ($form, &$form_state) {
  $title=$form_state['values']['title'];
  $price=$form_state['values']['price'];
  db_query("INSERT INTO {professions} (price, title) VALUES (%d, '%s')", $price, $title);
  drupal_set_message(t('Новый товар %title с ценой %price добавлен', array('%title'=>$title, '%price'=>$price)));
}

function jl_db($var) {
  drupal_set_message("<pre>".print_r($var, true)."</pre>");
}

function professions_form($form_state) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('товар'),
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('Введите название товара'),
  );
  $form['price'] = array(
    '#type' => 'textfield',
    '#title' => t('цена'),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('Введите цену товара ща условную единицу товара'),
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Добавить'));
  return $form;
}

function page_kingdom_knight() {
  $result = db_query("SELECT name, fee, tithe, (select count(*) from {farmers} where farmers.knight_id=knights.id) as farmers FROM {knights}");
  $rows=array();
  while ($record = db_fetch_object($result)) {
    $rows[]=array($record->name, $record->farmers, $record->fee, $record->tithe);
  }
  if (count ($rows)) {
    $out .= theme_table(array("Рыцарь", "Крестьян", "Жалование (%)", "Десятина (%)"), $rows);
  } else {
    $out .= "<h2>В данный момент в царстве совершенно нет рыцарей</h2>";
  }
  $out .= "<h3>Добавьте нового рыцаря</h3>".drupal_get_form('knights_form');
  return $out;
}

function knights_form_submit ($form, &$form_state) {
  $name=$form_state['values']['name'];
  $farmers=$form_state['values']['farmers'];
  $fee=$form_state['values']['fee'];
  $tithe=$form_state['values']['tithe'];
  $result = db_query("SELECT id FROM {professions}");
  $profs=array();
  while ($row = db_fetch_array($result)) {
    $profs[]=$row['id'];
  }
  // make knight
  db_query("INSERT INTO {knights} (name,fee,tithe) VALUES ('%s', %d, %d)", $name, $fee, $tithe);
  $id=db_last_insert_id("knights", "id");
  // make farmers
  $vals = '';
  for ($i=1; $i <= $farmers; ++$i) { // pair of (knight_id, prof_id) where prof_id is random selected from {professions} table
    $vals .= "(".intval($id).",".$profs[array_rand($profs)].")".($i==$farmers ? '':',');
  }
  db_query("INSERT INTO {farmers} (knight_id,proffession_id) VALUES ".$vals);
  drupal_set_message(t('Новый рыцарь %knight добавлен', array('%knight'=>$name)));
}

function knights_form_validate($form, &$form_state) {
  $name=$form_state['values']['name'];
  if ( $name == '') {
    form_set_error('name', t('Имя рыцаря не должно быть пустым'));
  }
  $farmers=$form_state['values']['farmers'];
  if ($farmers>100 || $farmers < 10) {
    form_set_error('farmers', t('Крестьян может быть от 10 до 100.'));
  }
  $fee=$form_state['values']['fee'];
  if ($fee>50 || $fee < 10) {
    form_set_error('fee', t('Плата может быть от 10 до 50.'));
  }
  $tithe=$form_state['values']['tithe'];
  if ($tithe>25 || $tithe < 10) {
    form_set_error('tithe', t('Десятина может быть от 10 до 25.'));
  }
  $result = db_query("SELECT COUNT(*) as count FROM {knights} WHERE name='%s'", $name);
  $result = db_fetch_array($result);
  if ($result['count'] > 0) {
    form_set_error('name', t('Имя рыцаря уже занято'));
  }
}

function knights_form($form_state) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Имя'),
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('Введите имя рыцаря (уникальное)'),
  );
  $form['details'] = array(
    '#type' => 'fieldset',
    '#title' => t('Дополнительно'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['details']['farmers'] = array(
    '#type' => 'textfield',
    '#title' => t('Количество крестьян'),
    '#size' => 10,
    '#maxlength' => 10,
    '#default_value' => rand(10, 100),
  );
  $form['details']['fee'] = array(
    '#type' => 'textfield',
    '#title' => t('Плата (в процентах) короля рыцарю'),
    '#size' => 10,
    '#maxlength' => 10,
    '#default_value' => rand(10, 50),
  );
  $form['details']['tithe'] = array(
    '#type' => 'textfield',
    '#title' => t('Десятина. Доля (в процентах), которую рыцарь отдаёт церкви'),
    '#size' => 10,
    '#maxlength' => 10,
    '#default_value' => rand(10, 25),
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Добавить'));
  return $form;
}

function page_kingdom_stat() {
  $result = db_query("SELECT SUM(incom_king) as incom_king, SUM(incom_bishop) as incom_bishop, knight_id, profession_id, day".
                     " FROM {logs} GROUP BY knight_id, profession_id, day");
  $stat=array();
  while ($row = db_fetch_array($result)) {
    $stat[$row['day']][$row['knight_id']][$row['profession_id']]=$row;
  }
  global $knights, $professions;
  $out = '';
  $header=array('Рыцарь');
  get_all_knights();
  get_all_professions();
  foreach ($professions as $p) {
    $header[]=$p['title'];
  }
  $prev_day=0;
  foreach ($stat as $day => $mstat) {
    $sum=0;
    $rows=array();
    foreach ($mstat as $knight => $kstat) {
      $tmp=array($knights[$knight]['name']);
    //foreach ($kstat as $prof => $pstat) {
      foreach ($professions as $p => $val) {
        $incom = $kstat[$p]['incom_king'];
        $sum += $incom;
        $tmp[]=round($incom,2);
      }
      $rows[]=$tmp;
    }
    $out .= t("<h3>Доход короля за период %1 - %2: %sum</h3>", array('%1'=> $prev_day+1, '%2' => $day, '%sum' => round ($sum, 2)));
    $out .= theme_table($header, $rows);
    //var_dump($knights, $professions);
    //var_dump($mstat);
    $prev_day=$day;
  }
  return $out;
}

/*
function kingdom_baz($alice, $bob) {
  // Make sure you don't trust the URL to be safe! Always check for threats.
  if (!is_numeric($alice) || !is_numeric($bob)) {
    // We will just show a standard "access denied" page in this case.
    return drupal_access_denied();
  }

  $list[] = t("Alice's number was @number.", array('@number' => $alice));
  $list[] = t("Bob's number was @number.", array('@number' => $bob));
  $list[] = t('The total was @number.', array('@number' => $alice + $bob));

  return t("baz content") . theme('item_list', $list);
}
*/

/* UTILS */

function get_all_knights(){
  global $knights;
  $knights = array();
  $result = db_query("SELECT * FROM {knights}");
  while ($row = db_fetch_array($result)) {
    $knights[$row['id']]=array('fee'=>$row['fee'], 'tithe' => $row['tithe'], 'name' => $row['name']);
  }
  //jl_db($knights);
}

function get_all_professions(){
  global $professions;
  $professions = array();
  $result = db_query("SELECT * FROM {professions}");
  while ($row = db_fetch_array($result)) {
    $professions[$row['id']]=array('price'=>$row['price'], 'title' => $row['title']);
  }
  //jl_db($professions);
}